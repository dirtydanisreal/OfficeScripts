{"version":"0.3.0","body":"function main(workbook: ExcelScript.Workbook) {\n  // Get sheets\n  let ps = workbook.getWorksheet(\"PHONE 6.100 AC-PC\");\n  let protection = ps.getProtection();\n\n  // Pause protection to allow edits\n  protection.pauseProtection(\"imsorrydave\");\n\n  // Set formulas and autofill\n  applyFormulas(ps);\n\n  // Apply formatting\n  applyBorders(ps, \"A6:I26\");\n\n  // Apply conditional formatting\n  condFormatting(ps);\n\n  dataValidation(workbook);\n\n  clearAndSetAllowEdit(workbook, [\"C4\",\"C5\",\"B7:B26\",\"C7:C26\",\"D7:D26\",\"E7:E26\",\"G7:G26\",\"L3:L5\"]);\n\n  // Resume protection after making changes\n  protection.resumeProtection();\n}\n\n// Helper function to apply formulas\nfunction applyFormulas(ps: ExcelScript.Worksheet) {\n  const rnFormula = '=SUM(IF(FREQUENCY(IF(E7:E26<>\"\", MATCH(E7:E26, E7:E26, 0)), IF(E7:E26<>\"\", MATCH(E7:E26, E7:E26, 0))) > 0, 1)) + IF(COUNTIF(E7:E26, C4)=0, 1, 0) + SUM(IF(G7:G26 = \"RESOURCE\",1,0))';\n  const nctFormula = '=SUM(IF(FREQUENCY(IF(G7:G26<>\"\", MATCH(G7:G26, G7:G26, 0)), IF(G7:G26<>\"\", MATCH(G7:G26, G7:G26, 0))) > 0, 1)) +SUM(IF(G7:G26 = \"RESOURCE\",-1,0))';\n  const acFormula = '=COUNTIFS(D7:D26,\"*AC*\",B7:B26,\"<>*(ADMIT)*\")';\n  const pcFormula = '=COUNTIFS(D7:D26,\"*PC*\",B7:B26,\"<>*(ADMIT)*\")';\n  const otherFormulas = {\n    chargeFormula: '=IF(C4<>\"\",XLOOKUP(C4,\\'RN-NCT LIST\\'!F:F,\\'RN-NCT LIST\\'!G:G), \"\")',\n    sgeFormula: '=COUNTIFS(C7:C26,\"*SGE*\",B7:B26,\"<>*(ADMIT)*\")',\n    sgtFormula: '=COUNTIFS(C7:C26,\"*SGT*\",B7:B26,\"<>*(ADMIT)*\")',\n    scrFormula: '=COUNTIFS(C7:C26,\"*SCR*\",B7:B26,\"<>*(ADMIT)*\")',\n    sgoFormula: '=COUNTIFS(C7:C26,\"*SGO*\",B7:B26,\"<>*(ADMIT)*\")',\n    covidFormula: '=COUNTIFS(B7:B26,\"*(+)*\",B7:B26,\"<>*(ADMIT)*\")',\n    sitterFormula: '=SUM(COUNTIFS(B7:B26,{\"*(SIT)*\",\"*(TS)*\",\"*(72)*\"},B7:B26,\"<>*(ADMIT)*\"))',\n    shiftFormula: '=IF(OR(G78>=TIME(7,0,0),G78<TIME(19,0,0)),\"7 AM\", \"7PM\")',\n  };\n\n  const fillRange = ps.getRange(\"F7:F26\");\n  ps.getRange(\"F7\").setFormula('=IF(E7<>\"\",XLOOKUP(E7,\\'RN-NCT LIST\\'!F:F,\\'RN-NCT LIST\\'!G:G),\"\")');\n  ps.getRange(\"F7\").autoFill(fillRange, ExcelScript.AutoFillType.fillDefault);\n\n  const fillRange2 = ps.getRange(\"H7:H26\");\n  ps.getRange(\"H7\").setFormula('=IF(G7<>\"\",XLOOKUP(G7,\\'RN-NCT LIST\\'!F:F,\\'RN-NCT LIST\\'!G:G),\"\")');\n  ps.getRange(\"H7\").autoFill(fillRange2, ExcelScript.AutoFillType.fillDefault);\n\n  // Apply more formulas\n  ps.getRange(\"O7\").setFormula(rnFormula);\n  ps.getRange(\"O8\").setFormula(nctFormula);\n  ps.getRange(\"O11\").setFormula(acFormula);\n  ps.getRange(\"O12\").setFormula(pcFormula);\n  ps.getRange(\"O13\").setFormulaLocal('=SUM(O11,O12)');\n  ps.getRange(\"F4\").setFormulaLocal(otherFormulas.chargeFormula);\n  ps.getRange(\"O16\").setFormulaLocal(otherFormulas.sgeFormula);\n  ps.getRange(\"O17\").setFormulaLocal(otherFormulas.sgtFormula);\n  ps.getRange(\"O18\").setFormulaLocal(otherFormulas.scrFormula);\n  ps.getRange(\"O19\").setFormulaLocal(otherFormulas.sgoFormula);\n  ps.getRange(\"O24\").setFormulaLocal(otherFormulas.covidFormula);\n  ps.getRange(\"O27\").setFormulaLocal(otherFormulas.sitterFormula);\n  ps.getRange(\"C5\").setFormulaLocal(otherFormulas.shiftFormula);\n}\n\nfunction applyBorders(sheet: ExcelScript.Worksheet, rangeAddress: string) {\n  // Apply border to the top edge\n  let topBorder = sheet.getRange(rangeAddress).getFormat().getRangeBorder(ExcelScript.BorderIndex.edgeTop);\n  topBorder.setStyle(ExcelScript.BorderLineStyle.continuous);\n  topBorder.setWeight(ExcelScript.BorderWeight.thick);\n  topBorder.setColor(\"000000\");\n\n  // Apply border to the right edge\n  let rightBorder = sheet.getRange(rangeAddress).getFormat().getRangeBorder(ExcelScript.BorderIndex.edgeRight);\n  rightBorder.setStyle(ExcelScript.BorderLineStyle.continuous);\n  rightBorder.setWeight(ExcelScript.BorderWeight.thick);\n  rightBorder.setColor(\"000000\");\n\n  // Apply border to the left edge\n  let leftBorder = sheet.getRange(rangeAddress).getFormat().getRangeBorder(ExcelScript.BorderIndex.edgeLeft);\n  leftBorder.setStyle(ExcelScript.BorderLineStyle.continuous);\n  leftBorder.setWeight(ExcelScript.BorderWeight.thick);\n  leftBorder.setColor(\"000000\");\n\n  // Apply border to the bottom edge\n  let bottomBorder = sheet.getRange(rangeAddress).getFormat().getRangeBorder(ExcelScript.BorderIndex.edgeBottom);\n  bottomBorder.setStyle(ExcelScript.BorderLineStyle.continuous);\n  bottomBorder.setWeight(ExcelScript.BorderWeight.thick);\n  bottomBorder.setColor(\"000000\");\n\n  // Apply border to the inside horizontal\n  let insideHBorder = sheet.getRange(rangeAddress).getFormat().getRangeBorder(ExcelScript.BorderIndex.insideHorizontal);\n  insideHBorder.setStyle(ExcelScript.BorderLineStyle.continuous);\n  insideHBorder.setWeight(ExcelScript.BorderWeight.thin);\n  insideHBorder.setColor(\"000000\");\n\n  // Apply border to the inside vertical\n  let insideVBorder = sheet.getRange(rangeAddress).getFormat().getRangeBorder(ExcelScript.BorderIndex.insideVertical);\n  insideVBorder.setStyle(ExcelScript.BorderLineStyle.continuous);\n  insideVBorder.setWeight(ExcelScript.BorderWeight.thin);\n  insideVBorder.setColor(\"000000\");\n}\n\nfunction condFormatting(sheet: ExcelScript.Worksheet) {\n  let patientName = sheet.getRange('B7:B26');\n\n  try {\n    // Check if there are conditional formats and safely delete them\n    let conditionalFormats = patientName.getConditionalFormats();\n    if (conditionalFormats.length > 0) {\n      for (let i = conditionalFormats.length - 1; i >= 0; i--) {\n        conditionalFormats[i].delete(); // Safely delete existing formats\n      }\n      console.log(\"Conditional formatting rules cleared.\");\n    }\n  } catch (error) {\n    console.log(\"Error occurred while clearing conditional formatting: \" + error.message);\n  }\n\n  // Apply conditional formatting for text comparisons \"(S)\" and \"(P)\"\n  applyConditionalFormatting(patientName, '(S)', 'red', '00b0f0');\n  applyConditionalFormatting(patientName, '(P)', 'red', '00b0f0');\n\n  // Apply custom conditional formatting with the formula\n  let conditionalFormatRule = patientName.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);\n\n  // Adjust the formula to reference the correct relative cells within the range\n  conditionalFormatRule.getCustom().getRule().setFormula(\"=AND(M7>1, M26<5)\");\n\n  let format = conditionalFormatRule.getCustom().getFormat();\n  format.getFill().setColor(\"33ccff\"); // Set background color to blue\n  format.getFont().setBold(true); // Make font bold\n}\n\n// Helper function for conditional formatting\nfunction applyConditionalFormatting(range: ExcelScript.Range, text: string, color1: string, color2: string) {\n  const textComparison = range.addConditionalFormat(ExcelScript.ConditionalFormatType.containsText).getTextComparison();\n  textComparison.setRule({ text, operator: ExcelScript.ConditionalTextOperator.contains });\n  textComparison.getFormat().getFill().setColor(color1);\n  textComparison.getFormat().getFont().setBold(true);\n}\n\n\nfunction dataValidation(workbook: ExcelScript.Workbook) {\n  const ps = workbook.getWorksheet(\"PHONE 6.100 AC-PC\");\n\n  // Define the ranges\n  const rnRange = ps.getRange(\"E7:E26\");\n  const nctRange = ps.getRange(\"G7:G26\");\n  const locRange = ps.getRange(\"D7:D26\");\n  const teamRange = ps.getRange(\"C7:C26\");\n\n  // Clear existing validations\n  [rnRange, nctRange, locRange, teamRange].forEach(range => {\n    range.getDataValidation()?.clear();\n  });\n\n  // Define validation rules\n  const rnRule: ExcelScript.DataValidationRule = {\n    list: { source: \"='RN-NCT LIST'!$F:$F\", inCellDropDown: true }\n  };\n\n  const nctRule: ExcelScript.DataValidationRule = {\n    list: { source: \"='RN-NCT LIST'!$F:$F\", inCellDropDown: true }\n  };\n\n  const locRule: ExcelScript.DataValidationRule = {\n    list: { source: \"AC,PC\", inCellDropDown: true }\n  };\n\n  const teamRule: ExcelScript.DataValidationRule = {\n    list: { source: \"=$B$78:$B$128\", inCellDropDown: true }\n  };\n\n  const teamError: ExcelScript.DataValidationErrorAlert = {\n    message:\"wrong team\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"wrong team\"\n  };\n  const rnError: ExcelScript.DataValidationErrorAlert = {\n    message: \"rn not found\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"rn not found\"\n  };\n  const nctError: ExcelScript.DataValidationErrorAlert = {\n    message: \"nct not found\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"nct not found\"\n  };\n  const locError: ExcelScript.DataValidationErrorAlert = {\n    message: \"loc doesn't exist\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"loc doesn't exist\"\n  };\n\n  // Apply rules\n  try {\n    rnRange.getDataValidation()?.setRule(rnRule);\n    rnRange.getDataValidation()?.setIgnoreBlanks(true);\n    rnRange.getDataValidation()?.setErrorAlert(rnError);\n    nctRange.getDataValidation()?.setRule(nctRule);\n    nctRange.getDataValidation()?.setErrorAlert(nctError);\n    nctRange.getDataValidation()?.setIgnoreBlanks(true);\n    locRange.getDataValidation()?.setRule(locRule);\n    locRange.getDataValidation()?.setErrorAlert(locError);\n    locRange.getDataValidation()?.setIgnoreBlanks(true);\n    teamRange.getDataValidation()?.setRule(teamRule);\n    teamRange.getDataValidation()?.setErrorAlert(teamError);\n    teamRange.getDataValidation()?.setIgnoreBlanks(true);\n  } catch (error) {\n    \n  }\n}\n\n  \n  \n\n\n\nfunction allowToEditRange(sheet: ExcelScript.Worksheet) {\n  // Get the worksheet where you want to apply protection\n  \n\n  // Define the range that you want to allow edits in (Range object)\n \n  // Get the protection object for the worksheet\n  const protection = sheet.getProtection();\n\n  // If the sheet is not already protected, apply protection\n  \n\n    let allowEditRanges = protection.getAllowEditRanges();\n    for (let allowEditRange of allowEditRanges) {\n      allowEditRange.delete(); // Remove the allow-edit rule\n    \n  \n\n  // Define the options for the allowed edit range (e.g., no password required)\n  const allowEditSettings: ExcelScript.AllowEditRangeOptions = {\n    password: \"imsorrydave\"// No password protection for the range\n  };\n\n  // Apply the \"Allow to Edit\" for the specified range\n  protection.addAllowEditRange(\"RN\", \"E7:E26\", allowEditSettings); // Use the Range object\n\n  protection.addAllowEditRange(\"PATIENT\", \"B7:B26\", allowEditSettings); // Use the Range object\n\n  protection.addAllowEditRange(\"TEAM\", \"C7:C26\", allowEditSettings); // Use the Range object\n\n  protection.addAllowEditRange(\"LOC\", \"D7:D26\", allowEditSettings); // Use the Range object\n\n  protection.addAllowEditRange(\"NCT\", \"G7:G26\", allowEditSettings);\n\n  protection.addAllowEditRange(\"CHARGE\", \"C4:C4\", allowEditSettings);\n\n  //protection.addAllowEditRange'(\"SHIFT\", \"C5:C5\", allowEditSettings);\n\n  protection.addAllowEditRange(\"FIRST\", \"L3:L3\", allowEditSettings);\n\n  protection.addAllowEditRange(\"LAST\", \"L4:L4\", allowEditSettings);\n\n  protection.addAllowEditRange(\"NUM\", \"L5:L5\", allowEditSettings);\n};\n\n};\n\nfunction allowEdit(sheet: ExcelScript.Worksheet) {\n\n  \n\n   if (sheet.getProtection().getProtected()) {\n        sheet.getProtection().unprotect(\"imsorrydave\");\n    }\n\n  const editableRange1 = sheet.getRange(\"E7:E3\");\n  const editableRange2 = sheet.getRange(\"G7:G3\");\n  const editableRange3 = sheet.getRange(\"B7:B26\");\n  const editableRange4 = sheet.getRange(\"C7:C26\");\n  const editableRange5 = sheet.getRange(\"D7:D26\");\n  const editableRange6 = sheet.getRange(\"C4\");\n  const editableRange7 = sheet.getRange(\"L3\");\n  const editableRange8 = sheet.getRange(\"L4\");\n  const editableRange9 = sheet.getRange(\"L5\");\n\n  editableRange1.getFormat().getProtection().setLocked(false);\n  editableRange2.getFormat().getProtection().setLocked(false);\n  editableRange3.getFormat().getProtection().setLocked(false);\n  editableRange4.getFormat().getProtection().setLocked(false);\n  editableRange5.getFormat().getProtection().setLocked(false);\n  editableRange6.getFormat().getProtection().setLocked(false);\n  editableRange7.getFormat().getProtection().setLocked(false);\n  editableRange8.getFormat().getProtection().setLocked(false);\n  editableRange9.getFormat().getProtection().setLocked(false);\n\n  sheet.getProtection().protect()\n\n\n\n  console.log(\"Protection reapplied with specified editable ranges.\");\n\n\n}\n\n/**\n * Clears all existing allowToEdit settings and then sets new allowToEdit ranges.\n *\n * @param workbook The workbook object in the Excel script.\n * @param editableRanges An array of string ranges that should be editable, e.g., [\"A1:C10\", \"D1:D10\"]\n */\nfunction clearAndSetAllowEdit(workbook: ExcelScript.Workbook, editableRanges: string[]) {\n  // Select the active sheet (you can change this to a specific sheet name if needed)\n  let sheet = workbook.getActiveWorksheet();\n\n  // Clear all existing allowEdit permissions by unprotecting the sheet\n  let protection = sheet.getProtection();\n  if (protection.getProtected()) {\n    protection.pauseProtection();\n  }\n\n  // Protect the sheet to apply new settings\n  protection.protect();\n\n  protection.setPassword(\"imsorrydave\");\n\n  // Loop through the specified ranges and set them as editable\n  editableRanges.forEach(rangeAddress => {\n    let range = sheet.getRange(rangeAddress);\n    range.getFormat().getProtection().setLocked(false);\n  });\n\n  // Log completion\n  console.log(\"Protection settings updated. Specified ranges are now editable.\");\n}\n\n","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}