{"version":"0.3.0","body":"function main(workbook: ExcelScript.Workbook) {\n  let pm = workbook.getWorksheet(\"PATIENT_MAKER\");\n  const protection = pm.getProtection();\n\n  // Pause protection\n  protection.pauseProtection(\"imsorrydave\");\n\n  // Formulas for different cells\n  const formulas = [\n    { range: \"C1\", formula: '=UPPER(CONCATENATE(IF(K4=\"Yes\", \"XXXXX\", TRIM(I2))))' },\n    { range: \"A1\", formula: '=UPPER(CONCATENATE(IF(K4=\"Yes\", \"XXXXX\", TRIM(I2))))'},\n    { range: \"A2\", formula: '=I10' },\n    { range: \"B2\", formula: '=IF(I9>9,CONCATENATE(\"A.\",I9),CONCATENATE(\"A.0\",I9))' },\n    { range: \"C2\", formula: '=IF(K8=\"2CDU\",\"2CDU\",IF(K8=\"A\",IF(I9>9,CONCATENATE(\"A.\",I9),CONCATENATE(\"A.0\",I9)),CONCATENATE(K8,\".0\",I9)))' },\n    { range: \"C3\", formula: '=I10' },\n    { range: \"D8\", formula: '=UPPER(CONCATENATE(IF(K4=\"Yes\", \"XXXXX\", I2), \", \", IF(K4=\"Yes\", \"X\", LEFT(I3,1))))' },\n    { range: \"D9\", formula: '=UPPER(CONCATENATE(TRIM(I4),\", \",TRIM(I5)))' },\n    {\n      range: \"D10\", formula: `=UPPER(\n    IF(AND(I4=\"SGT\",I8=\"ICU\"),\n        CONCATENATE(\"TRAUMA / \",\"ICU\"),\n        IF(AND(I4=\"SGT\",I6<=5),\n            CONCATENATE(\"TRAUMA / \",\"FLOOR\",\" \",I6),\n            IF(AND(I4=\"SGE\",I6=\"ICU\"),\n                CONCATENATE(\"ICU\",\" \",\"/ \",\"EGS\"),\n                IF(AND(I4=\"SGE\",I6),\n                    CONCATENATE(\"FLOOR\",\" \",1,\" \",\"/ \",\"EGS\"), \n                    IF(AND(I4=\"TXP\",I6=\"L\"),\n                        CONCATENATE(\"TXP / \",\"LIVER\"),\n                        IF(AND(I4=\"TXP\",I6=\"R\"),\n                            CONCATENATE(\"TXP / \",\"RENAL\"),\n                            IF(I4=\"HM\",\n                                CONCATENATE(\"HM / \", I6),\n                                \" \")\n                        )\n                    )\n                )\n            )\n        )\n    )\n)\n\n`\n    },\n    { range: \"A10\", formula: '=IF(I6<>\"\",\"TEAM\",\"\")' },\n    { range: \"A4\", formula: '=IF(K2<>\"No\",J31,\"\")' },\n    { range: \"C4\", formula: '=IF(K2<>\"No\",J31,\"\")' },\n    { range: \"F8\", formula: '=IF(K2<>\"No\",J31,\"\")' },\n    { range: \"F2\", formula: '=IFS(K3=\"SPA\",I31,K3=\"ASL\",H31,K3=\"JAP\",G31,K3=\"No\",\"\")' },\n    { range: \"F4\", formula: '=IFS(K3=\"SPA\",I31,K3=\"ASL\",H31,K3=\"JAP\",G31,K3=\"No\",\"\")' },\n    { range: \"F9\", formula: '=IFS(K3=\"SPA\",I31,K3=\"ASL\",H31,K3=\"JAP\",G31,K3=\"No\",\"\")' }\n  ];\n\n  // Apply all formulas in one loop\n  formulas.forEach(item => {\n    pm.getRange(item.range).setFormulaLocal(item.formula);\n  });\n\n  resetData(workbook);\n \n\n  // Resume protection\n  protection.resumeProtection();\n}\n\nfunction resetData (workbook: ExcelScript.Workbook){\n  let pm = workbook.getWorksheet(\"PATIENT_MAKER\");\n\n  let last = pm.getRange(\"I2\");\n  let first = pm.getRange(\"I3\");\n  let service = pm.getRange(\"I4\");\n  let attending = pm.getRange(\"I5\");\n  let team = pm.getRange(\"I6\");\n  let loc = pm.getRange(\"I8\");\n  let floor = pm.getRange(\"I9\");\n  let room = pm.getRange(\"I10\");\n  let nameAlert = pm.getRange(\"K2\");\n  let interpreter = pm.getRange(\"K3\");\n  let suppressed = pm.getRange(\"K4\");\n  let pav = pm.getRange(\"K8\");\n\n  let rangesToReset = [\n    \"I2\", \"I3\", \"I4\", \"I5\", \"I6\", \"I8\", \"I9\", \"I10\",\n    \"K2\", \"K3\", \"K4\", \"K8\"\n  ];\n\n  let ranges = [\"I2:I6\", \"I8:I10\", \"K2:K4\", \"K8:K8\"];\n\n \n\n  for (let rangeAddress of rangesToReset) {\n    let range = pm.getRange(rangeAddress);\n    const dataValidation = range.getDataValidation();\n    dataValidation.clear\n  }\n\n  pm.getRange(\"I2:I10\").getDataValidation()?.clear();\n\n  pm.getRange(\"K2:K4\").getDataValidation()?.clear();\n\n  pm.getRange(\"K8:K8\").getDataValidation()?.clear();\n\n  const serviceData = service.getDataValidation();\n\n  const serviceList: ExcelScript.ListDataValidation = {\n    source: \"SGE,SGT,SCR,SGO,SGR,TXP,PLA,OMF,VIR,HNS,HM,NEU,BMT,GEMS,GYO,GYN,URO\", inCellDropDown: true\n  }\n\n  const teamList: ExcelScript.ListDataValidation = {\n    source: \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,FF,L,R,ICU\", inCellDropDown: true\n  }\n\n  const locList: ExcelScript.ListDataValidation = {\n    source: \"FLOOR, ICU\", inCellDropDown: true\n  }\n\n  const floorList: ExcelScript.ListDataValidation = {\n    source: \"5,6,7,8,9,10,11,12\", inCellDropDown:true\n  }\n\n  const roomList: ExcelScript.ListDataValidation = {\n    source: \"111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242\", inCellDropDown: true\n  }\n\n  const pavList: ExcelScript.ListDataValidation = {\n    source: \"A,H,2CDU\", inCellDropDown: true\n  }\n\n  const nameAlertList: ExcelScript.ListDataValidation = {\n    source: \"No,Yes\", inCellDropDown: true\n  }\n\n  const interpreterList: ExcelScript.ListDataValidation = {\n    source: \"SPA, ASL, JAP, No\", inCellDropDown: true\n  }\n\n  const suppressedList: ExcelScript.ListDataValidation = {\n    source: \"No,Yes\", inCellDropDown:true\n  }\n\n  const serviceRule: ExcelScript.DataValidationRule = {\n    list: serviceList\n  }\n\n  const teamRule: ExcelScript.DataValidationRule = {\n    list: teamList\n  }\n\n  const locRule: ExcelScript.DataValidationRule = {\n    list: locList\n  }\n    \n  const roomRule: ExcelScript.DataValidationRule = {\n    list: roomList\n  }\n\n  const floorRule: ExcelScript.DataValidationRule = {\n    list: floorList\n  }\n\n  const pavRule: ExcelScript.DataValidationRule = {\n    list: pavList\n  }\n\n  const nameAlertRule: ExcelScript.DataValidationRule = {\n    list: nameAlertList\n  }\n\n  const interpreterRule: ExcelScript.DataValidationRule = {\n    list: interpreterList\n  }\n\n  const suppressedRule: ExcelScript.DataValidationRule = {\n    list: suppressedList\n  }\n\n  serviceData.setRule(serviceRule)\n\n  floor.getDataValidation().setRule(floorRule);\n\n  team.getDataValidation().setRule(teamRule);\n\n  room.getDataValidation().setRule(roomRule)\n\n  loc.getDataValidation().setRule(locRule);\n\n  pav.getDataValidation().setRule(pavRule);\n\n  nameAlert.getDataValidation().setRule(nameAlertRule);\n\n  interpreter.getDataValidation().setRule(interpreterRule);\n\n  suppressed.getDataValidation().setRule(suppressedRule);\n\n  service.getDataValidation().setIgnoreBlanks(true);\n\n  team.getDataValidation().setIgnoreBlanks(true);\n\n  floor.getDataValidation().setIgnoreBlanks(true);\n\n  room.getDataValidation().setIgnoreBlanks(true);\n\n  pav.getDataValidation().setIgnoreBlanks(true);\n\n  nameAlert.getDataValidation().setIgnoreBlanks(true);\n\n  interpreter.getDataValidation().setIgnoreBlanks(true);\n\n  suppressed.getDataValidation().setIgnoreBlanks(true);\n\n  floor.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\"});\n\n  service.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  team.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  loc.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  nameAlert.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  suppressed.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  pav.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  interpreter.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n  room.getDataValidation().setErrorAlert({ showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, message: \"\", title: \"\" });\n\n service.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  room.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  team.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  loc.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  pav.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  nameAlert.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  interpreter.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  suppressed.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n  floor.getDataValidation().setPrompt({ showPrompt: false, message: null, title: null });\n\n\n\n  }\n\nfunction allowEdit(workbook: ExcelScript.Workbook) {\n  let pm = workbook.getWorksheet(\"PATIENT_MAKER\");\n\n  // Array of range addresses to be made editable\n  let ranges = [\"I2:I6\", \"I8:I10\", \"K2:K4\", \"K8:K8\"];\n\n  // Options for the allow edit ranges (no password)\n  const allowEditSettings: ExcelScript.AllowEditRangeOptions = {\n    password: null\n  };\n\n  // Get the worksheet protection object\n  const protection = pm.getProtection();\n\n  // Loop through the range addresses and add each as an allow-edit range\n  for (let rangeAddress of ranges) {\n    let range = pm.getRange(rangeAddress); // Get the actual Range object\n\n\n    const title = rangeAddress; // Unique title for each range\n\n    let editRange = protection.getAllowEditRanges();\n    \n      protection.addAllowEditRange(rangeAddress, rangeAddress, allowEditSettings);\n  }\n}\n\n\n\n\n\n\n\n\n\n  \n\n\n","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}