function main(workbook: ExcelScript.Workbook) {
	let selectedSheet = workbook.getActiveWorksheet();
	let protection: ExcelScript.WorksheetProtection = selectedSheet.getProtection();

	// Pause protection
	selectedSheet.getProtection().pauseProtection("imsorrydave");

	billThing(workbook);

	// Get the active cell and selected range
	let selectedCell = workbook.getActiveCell();
	let selectedRange = workbook.getSelectedRange();

	// Allowed ranges
	const allowedRanges = [
		"C3:H7",
		"C9:H13",
		"C15:H19",
		"C21:H25",
		"C27:H31",
		"C33:H37",
		"C39:H43"
	];

	// Check if the selected cell is within allowed ranges
	const isAllowed = allowedRanges.some(range => isCellInRange(selectedCell, selectedSheet.getRange(range)));

	if (isAllowed) {
		// Perform the copy operation
		selectedCell.copyFrom(selectedSheet.getRange("Q3:Q7"), ExcelScript.RangeCopyType.values, false, false);

		// Align the copied cell
		selectedCell.getFormat().setVerticalAlignment(ExcelScript.VerticalAlignment.center);
		selectedCell.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);

		console.log("Copy operation completed.");
	} else {
		console.log("The selected cell is not within the allowed ranges. Copy operation canceled.");
	}

	// Reapply protection (if needed)
	protection.resumeProtection();
}

/**
 * Check if a cell is within a specified range.
 * @param cell The cell to check.
 * @param range The allowed range.
 * @returns True if the cell is within the range, false otherwise.
 */
function isCellInRange(cell: ExcelScript.Range, range: ExcelScript.Range): boolean {
	const cellAddress = cell.getAddress();
	const rangeAddress = range.getAddress();

	const [cellSheet, cellRange] = cellAddress.split("!");
	const [rangeSheet, rangeArea] = rangeAddress.split("!");

	// Ensure the cell and range are on the same sheet
	if (cellSheet !== rangeSheet) {
		return false;
	}

	// Extract range boundaries
	const [startCell, endCell] = rangeArea.split(":");
	const { row: startRow, column: startColumn } = getCellCoordinates(startCell);
	const { row: endRow, column: endColumn } = getCellCoordinates(endCell);
	const { row: cellRow, column: cellColumn } = getCellCoordinates(cellRange);

	// Check if the cell falls within the boundaries of the range
	return (
		cellRow >= startRow &&
		cellRow <= endRow &&
		cellColumn >= startColumn &&
		cellColumn <= endColumn
	);
}

/**
 * Convert a cell address (e.g., "C3") into row and column coordinates.
 * @param address The cell address as a string.
 * @returns An object with row and column properties.
 */
function getCellCoordinates(address: string): { row: number; column: number } {
	const match = /([A-Z]+)(\d+)/.exec(address);
	if (!match) {
		throw new Error(`Invalid cell address: ${address}`);
	}
	const [, col, row] = match;
	return {
		row: parseInt(row),
		column: columnLetterToNumber(col)
	};
}



/**
 * Check if a target range is fully within an allowed range.
 * @param targetRange The target range for pasting
 * @param allowedRange The allowed range
 * @returns True if the target range is within the allowed range
 */
function isRangeWithin(targetRange: ExcelScript.Range, allowedRange: ExcelScript.Range): boolean {
	const targetAddress = targetRange.getAddress();
	const allowedAddress = allowedRange.getAddress();

	const [targetSheet, targetRangeOnly] = targetAddress.split("!");
	const [allowedSheet, allowedRangeOnly] = allowedAddress.split("!");

	// Ensure ranges are on the same sheet
	if (targetSheet !== allowedSheet) {
		return false;
	}

	// Extract range boundaries
	const targetBoundaries = getRangeBoundaries(targetRangeOnly);
	const allowedBoundaries = getRangeBoundaries(allowedRangeOnly);

	// Check if target boundaries are within allowed boundaries
	return (
		targetBoundaries.startRow >= allowedBoundaries.startRow &&
		targetBoundaries.endRow <= allowedBoundaries.endRow &&
		targetBoundaries.startColumn >= allowedBoundaries.startColumn &&
		targetBoundaries.endColumn <= allowedBoundaries.endColumn
	);
}

/**
 * Get range boundaries from a range address (e.g., "A1:B10").
 * @param rangeAddress The range address as a string
 * @returns An object with start and end row/column
 */
function getRangeBoundaries(rangeAddress: string): { startRow: number; endRow: number; startColumn: number; endColumn: number } {
	const rangeMatch = /([A-Z]+)(\d+):([A-Z]+)(\d+)/.exec(rangeAddress);
	if (!rangeMatch) {
		throw new Error(`Invalid range address: ${rangeAddress}`);
	}

	const [, startCol, startRow, endCol, endRow] = rangeMatch;

	return {
		startRow: parseInt(startRow),
		endRow: parseInt(endRow),
		startColumn: columnLetterToNumber(startCol),
		endColumn: columnLetterToNumber(endCol),
	};
}

/**
 * Convert a column letter (e.g., "A", "B", "AA") to a column number.
 * @param columnLetter The column letter
 * @returns The column number
 */
function columnLetterToNumber(columnLetter: string): number {
	let column = 0;
	for (let i = 0; i < columnLetter.length; i++) {
		column = column * 26 + (columnLetter.charCodeAt(i) - "A".charCodeAt(0) + 1);
	}
	return column;
}

function billThing(workbook: ExcelScript.Workbook) {
  let cs = workbook.getWorksheet("CENSUS TRACKING");

  const formulas = [{range: 'Q19', formula: '=S20'},{range: 'Q20', formula: '=M14& " / " &M15'},{range:'Q21',formula: '=S26& " / " & S23'},{range:'Q22',formula: '=S19& " / " & S18'},{range:'Q23',formula: '=S29& " / 0"'}];

   const formulas2 = [{range: 'Q3', formula: '=S20'},{range: 'Q4', formula: '=S14& " / " &S15'},{range:'Q5',formula: '=S26& " / " & S23'},{range:'Q6',formula: '=S19& " / " & S18'},{range:'Q7',formula: '=S29& " / 0"'}];

  const formulas3 = [{ range: 'S20', formula: '=SUM(M20,P20)' }, { range: 'S14', formula: '=SUM(M14,P14)' }, { range: 'S15', formula: '=SUM(M15,P15)' }, { range: 'S18', formula: '=SUM(M18,P18)' }, { range: 'S19', formula: '=SUM(M19,P19)' }, { range: 'S23', formula: '=SUM(M23,P23)' }, { range: 'S26', formula: '=SUM(M26,P26)' }, { range: 'S26', formula: '=SUM(M26,P26)' }, { range: 'S29', formula: '=SUM(M29,P19)' }];

  // Apply all formulas
  formulas.forEach(({ range, formula }) => {
    cs.getRange(range).setFormula(formula);
  });

  //formulas2.forEach(({ range, formula }) => {
  //  cs.getRange(range).setFormula//(formula);
  //});

  formulas3.forEach(({ range, formula }) => {
    cs.getRange(range).setFormula(formula);
  });

  let values = cs.getRange("Q19:Q23");

  cs.getRange("Q3:Q7").copyFrom(values, ExcelScript.RangeCopyType.values, false, false);
}

function setFormulas(workbook: ExcelScript.Workbook) {
  let cs = workbook.getWorksheet("CENSUS TRACKING");
 

  // Apply date formulas for B2, B8, B14, ..., B38
  for (let i = 0; i < 7; i++) {
    let cell = cs.getRange(`B${2 + i * 6}`);
    cell.setFormula(`=TEXT(L6+${i}, "mm/dd/yy")`);
  }

  // Other formulas and their target ranges
  const formulas = [
    { range: 'M14', formula: `=SUM(IF(FREQUENCY(IF('PHONE 6.100 AC-PC'!E7:E38<>"", MATCH('PHONE 6.100 AC-PC'!E7:E38, 'PHONE 6.100 AC-PC'!E7:E38, 0)), IF('PHONE 6.100 AC-PC'!E7:E38<>"", MATCH('PHONE 6.100 AC-PC'!E7:E38, 'PHONE 6.100 AC-PC'!E7:E38, 0))) > 0, 1)) + IF(COUNTIF('PHONE 6.100 AC-PC'!E7:E38, 'PHONE 6.100 AC-PC'!C4)=0, 1, 0) + SUM(IF('PHONE 6.100 AC-PC'!G7:G38 = "RESOURCE",1,0))` },
    { range: 'M15', formula: `=SUM(IF(FREQUENCY(IF('PHONE 6.100 AC-PC'!G7:G38<>"", MATCH('PHONE 6.100 AC-PC'!G7:G38, 'PHONE 6.100 AC-PC'!G7:G38, 0)), IF('PHONE 6.100 AC-PC'!G7:G38<>"", MATCH('PHONE 6.100 AC-PC'!G7:G38, 'PHONE 6.100 AC-PC'!G7:G38, 0))) > 0, 1)) + SUM(IF('PHONE 6.100 AC-PC'!G7:G38 = "RESOURCE",-1,0))` },
    { range: 'M18', formula: `=COUNTIFS('PHONE 6.100 AC-PC'!D7:D38,"AC",'PHONE 6.100 AC-PC'!B7:B38,"<>*(ADMIT)*")` },
    { range: 'M19', formula: `=COUNTIFS('PHONE 6.100 AC-PC'!D7:D38,"PC",'PHONE 6.100 AC-PC'!B7:B38,"<>*(ADMIT)*")` },
    { range: 'M20', formula: `='PHONE 6.100 AC-PC'!O13` },
    { range: 'M23', formula: `=COUNTIFS('PHONE 6.100 AC-PC'!B7:B38,"*(+)*",'PHONE 6.100 AC-PC'!B7:B38,"<>*(ADMIT)*")` },
    { range: 'M26', formula: `=SUM(COUNTIFS('PHONE 6.100 AC-PC'!B7:B38,{"*(SIT)*","*(TS)*","*(72)*"},'PHONE 6.100 AC-PC'!B7:B38,"<>*(ADMIT)*"))` },
    { range: 'M29', formula: `=COUNTIF('PHONE 6.100 AC-PC'!B7:B38,"*(ADMIT)*")` },
    { range: 'A1', formula: `="Census Tracking Week : " & TEXT(L6,"mm/dd") & " - " & TEXT(L6+6,"mm/dd")` }
  ];

  // Apply all formulas
  formulas.forEach(({ range, formula }) => {
    cs.getRange(range).setFormula(formula);
  });

  billThing(workbook);

  clearAndSetAllowEdit(workbook, ["C3:H7", "C9:H13", "C15:H19", "C21:H25", "C27:H31", "C33:H37", "C39:H43", "L6"]);
  
  

  
}





function clearAndSetAllowEdit(workbook: ExcelScript.Workbook, editableRanges: string[]) {
  // Select the active sheet (you can change this to a specific sheet name if needed)
  let sheet = workbook.getActiveWorksheet();

  // Clear all existing allowEdit permissions by unprotecting the sheet
  let protection = sheet.getProtection();
  if (protection.getProtected()) {
    protection.pauseProtection();
  }

  // Protect the sheet to apply new settings
  protection.protect();

  protection.setPassword("imsorrydave");

  // Loop through the specified ranges and set them as editable
  editableRanges.forEach(rangeAddress => {
    let range = sheet.getRange(rangeAddress);
    range.getFormat().getProtection().setLocked(false);
  });

  // Log completion
  console.log("Protection settings updated. Specified ranges are now editable.");
}
