{"version":"0.3.0","body":"function main(workbook: ExcelScript.Workbook) {\r\n\tlet selectedSheet = workbook.getActiveWorksheet();\r\n\tlet protection: ExcelScript.WorksheetProtection = selectedSheet.getProtection();\r\n\r\n\t// Pause protection\r\n\tselectedSheet.getProtection().pauseProtection(\"imsorrydave\");\r\n\r\n\t// Get the active cell and selected range\r\n\tlet selectedCell = workbook.getActiveCell();\r\n\tlet selectedRange = workbook.getSelectedRange();\r\n\r\n\t// Allowed ranges\r\n\tconst allowedRanges = [\r\n\t\t\"C3:H7\",\r\n\t\t\"C9:H13\",\r\n\t\t\"C15:H19\",\r\n\t\t\"C21:H25\",\r\n\t\t\"C27:H31\",\r\n\t\t\"C33:H37\",\r\n\t\t\"C39:H43\"\r\n\t];\r\n\r\n\t// Check if the selected cell is within allowed ranges\r\n\tconst isAllowed = allowedRanges.some(range => isCellInRange(selectedCell, selectedSheet.getRange(range)));\r\n\r\n\tif (isAllowed) {\r\n\t\t// Perform the copy operation\r\n\t\tselectedCell.copyFrom(selectedSheet.getRange(\"Q3:Q7\"), ExcelScript.RangeCopyType.values, false, false);\r\n\r\n\t\t// Align the copied cell\r\n\t\tselectedCell.getFormat().setVerticalAlignment(ExcelScript.VerticalAlignment.center);\r\n\t\tselectedCell.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\r\n\r\n\t\tconsole.log(\"Copy operation completed.\");\r\n\t} else {\r\n\t\tconsole.log(\"The selected cell is not within the allowed ranges. Copy operation canceled.\");\r\n\t}\r\n\r\n\t// Reapply protection (if needed)\r\n\tprotection.resumeProtection();\r\n}\r\n\r\n/**\r\n * Check if a cell is within a specified range.\r\n * @param cell The cell to check.\r\n * @param range The allowed range.\r\n * @returns True if the cell is within the range, false otherwise.\r\n */\r\nfunction isCellInRange(cell: ExcelScript.Range, range: ExcelScript.Range): boolean {\r\n\tconst cellAddress = cell.getAddress();\r\n\tconst rangeAddress = range.getAddress();\r\n\r\n\tconst [cellSheet, cellRange] = cellAddress.split(\"!\");\r\n\tconst [rangeSheet, rangeArea] = rangeAddress.split(\"!\");\r\n\r\n\t// Ensure the cell and range are on the same sheet\r\n\tif (cellSheet !== rangeSheet) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Extract range boundaries\r\n\tconst [startCell, endCell] = rangeArea.split(\":\");\r\n\tconst { row: startRow, column: startColumn } = getCellCoordinates(startCell);\r\n\tconst { row: endRow, column: endColumn } = getCellCoordinates(endCell);\r\n\tconst { row: cellRow, column: cellColumn } = getCellCoordinates(cellRange);\r\n\r\n\t// Check if the cell falls within the boundaries of the range\r\n\treturn (\r\n\t\tcellRow >= startRow &&\r\n\t\tcellRow <= endRow &&\r\n\t\tcellColumn >= startColumn &&\r\n\t\tcellColumn <= endColumn\r\n\t);\r\n}\r\n\r\n/**\r\n * Convert a cell address (e.g., \"C3\") into row and column coordinates.\r\n * @param address The cell address as a string.\r\n * @returns An object with row and column properties.\r\n */\r\nfunction getCellCoordinates(address: string): { row: number; column: number } {\r\n\tconst match = /([A-Z]+)(\\d+)/.exec(address);\r\n\tif (!match) {\r\n\t\tthrow new Error(`Invalid cell address: ${address}`);\r\n\t}\r\n\tconst [, col, row] = match;\r\n\treturn {\r\n\t\trow: parseInt(row),\r\n\t\tcolumn: columnLetterToNumber(col)\r\n\t};\r\n}\r\n\r\n\r\n\r\n/**\r\n * Check if a target range is fully within an allowed range.\r\n * @param targetRange The target range for pasting\r\n * @param allowedRange The allowed range\r\n * @returns True if the target range is within the allowed range\r\n */\r\nfunction isRangeWithin(targetRange: ExcelScript.Range, allowedRange: ExcelScript.Range): boolean {\r\n\tconst targetAddress = targetRange.getAddress();\r\n\tconst allowedAddress = allowedRange.getAddress();\r\n\r\n\tconst [targetSheet, targetRangeOnly] = targetAddress.split(\"!\");\r\n\tconst [allowedSheet, allowedRangeOnly] = allowedAddress.split(\"!\");\r\n\r\n\t// Ensure ranges are on the same sheet\r\n\tif (targetSheet !== allowedSheet) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Extract range boundaries\r\n\tconst targetBoundaries = getRangeBoundaries(targetRangeOnly);\r\n\tconst allowedBoundaries = getRangeBoundaries(allowedRangeOnly);\r\n\r\n\t// Check if target boundaries are within allowed boundaries\r\n\treturn (\r\n\t\ttargetBoundaries.startRow >= allowedBoundaries.startRow &&\r\n\t\ttargetBoundaries.endRow <= allowedBoundaries.endRow &&\r\n\t\ttargetBoundaries.startColumn >= allowedBoundaries.startColumn &&\r\n\t\ttargetBoundaries.endColumn <= allowedBoundaries.endColumn\r\n\t);\r\n}\r\n\r\n/**\r\n * Get range boundaries from a range address (e.g., \"A1:B10\").\r\n * @param rangeAddress The range address as a string\r\n * @returns An object with start and end row/column\r\n */\r\nfunction getRangeBoundaries(rangeAddress: string): { startRow: number; endRow: number; startColumn: number; endColumn: number } {\r\n\tconst rangeMatch = /([A-Z]+)(\\d+):([A-Z]+)(\\d+)/.exec(rangeAddress);\r\n\tif (!rangeMatch) {\r\n\t\tthrow new Error(`Invalid range address: ${rangeAddress}`);\r\n\t}\r\n\r\n\tconst [, startCol, startRow, endCol, endRow] = rangeMatch;\r\n\r\n\treturn {\r\n\t\tstartRow: parseInt(startRow),\r\n\t\tendRow: parseInt(endRow),\r\n\t\tstartColumn: columnLetterToNumber(startCol),\r\n\t\tendColumn: columnLetterToNumber(endCol),\r\n\t};\r\n}\r\n\r\n/**\r\n * Convert a column letter (e.g., \"A\", \"B\", \"AA\") to a column number.\r\n * @param columnLetter The column letter\r\n * @returns The column number\r\n */\r\nfunction columnLetterToNumber(columnLetter: string): number {\r\n\tlet column = 0;\r\n\tfor (let i = 0; i < columnLetter.length; i++) {\r\n\t\tcolumn = column * 26 + (columnLetter.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n\t}\r\n\treturn column;\r\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}