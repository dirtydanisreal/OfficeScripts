{"version":"0.3.0","body":"\nfunction main(workbook: ExcelScript.Workbook, sheetName: string) {\n    // Get the active cell and worksheet.\n    let ps = workbook.getWorksheet(\"PHONE 7.200 ICU\");\n    let protection = ps.getProtection();\n\n    // Pause protection to allow edits\n    protection.pauseProtection(\"imsorrydave\");\n\n    // Set formulas and autofill\n    setFormulas(ps);\n\n\n\n    // Apply conditional formatting\n    condFormatting(ps);\n\n    dataValidation(workbook);\n\n    clearAndSetAllowEdit(workbook, [\"C4\", \"C5\", \"B7:B38\", \"C7:C38\", \"D7:D38\", \"E7:E38\", \"G7:G38\", \"L3:L5\", \"L2\"]);\n\n    // Resume protection after making changes\n    protection.resumeProtection();\n\n}\n\nfunction setFormulas(worksheet: ExcelScript.Worksheet) {\n    const rnFormula = '=SUM(IF(FREQUENCY(IF(ISNUMBER(G9:G20), MATCH(G9:G20, G9:G20, 0)), IF(ISNUMBER(G9:G20), MATCH(G9:G20, G9:G20, 0))) > 0, 1), 0)) + IF(COUNTIF(G9:G20, L4)=0, 1, 0)';\n\n    const chargeFormula = '=IF(L2<>\"\",XLOOKUP(L2,\\'RN-NCT LIST\\'!E:E,\\'RN-NCT LIST\\'!F:F), \"\")';\n\n    worksheet.getRange(\"I9\").setFormula('=IF(G9<>\"\",XLOOKUP(G9,\\'RN-NCT LIST\\'!E:E,\\'RN-NCT LIST\\'!F:F),\"\")');\n    worksheet.getRange(\"I9\").autoFill(worksheet.getRange(\"I9:I20\"), ExcelScript.AutoFillType.fillDefault);\n\n    worksheet.getRange(\"I10:I10\").getFormat().getFill().setColor(\"white\");\n    worksheet.getRange(\"I12:I12\").getFormat().getFill().setColor(\"white\");\n    worksheet.getRange(\"I14:I14\").getFormat().getFill().setColor(\"white\");\n\n    worksheet.getRange(\"I16:I16\").getFormat().getFill().setColor(\"white\");\n\n    worksheet.getRange(\"I18:I18\").getFormat().getFill().setColor(\"white\");\n    worksheet.getRange(\"I20:I20\").getFormat().getFill().setColor(\"white\");\n\n    worksheet.getRange(\"M2\").setFormula(chargeFormula);\n}\n\n\n\n\n\nfunction dataValidation(workbook: ExcelScript.Workbook) {\n    const ps = workbook.getWorksheet(\"PHONE 7.200 ICU\");\n\n    // Define the ranges\n    const rnRange = ps.getRange(\"G9:G20\");\n\n    const teamRange = ps.getRange(\"C9:C20\");\n\n    // Clear existing validations\n    [rnRange, teamRange].forEach(range => {\n        range.getDataValidation()?.clear();\n    });\n\n    // Define validation rules\n    const rnRule: ExcelScript.DataValidationRule = {\n        list: { source: \"='RN-NCT LIST'!$E:$E\", inCellDropDown: true }\n    };\n\n\n\n    const teamRule: ExcelScript.DataValidationRule = {\n        list: { source: \"=$B$78:$B$128\", inCellDropDown: true }\n    };\n\n    const teamError: ExcelScript.DataValidationErrorAlert = {\n        message: \"wrong team\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"wrong team\"\n    };\n    const rnError: ExcelScript.DataValidationErrorAlert = {\n        message: \"rn not found\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"rn not found\"\n    };\n    const nctError: ExcelScript.DataValidationErrorAlert = {\n        message: \"nct not found\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"nct not found\"\n    };\n    const locError: ExcelScript.DataValidationErrorAlert = {\n        message: \"loc doesn't exist\", showAlert: false, style: ExcelScript.DataValidationAlertStyle.warning, title: \"loc doesn't exist\"\n    };\n\n    // Apply rules\n    try {\n        rnRange.getDataValidation()?.setRule(rnRule);\n        rnRange.getDataValidation()?.setIgnoreBlanks(true);\n        rnRange.getDataValidation()?.setErrorAlert(rnError);\n        teamRange.getDataValidation()?.setRule(teamRule);\n        teamRange.getDataValidation()?.setErrorAlert(teamError);\n        teamRange.getDataValidation()?.setIgnoreBlanks(true);\n    } catch (error) {\n\n    }\n}\n\nfunction allowToEditRange(sheet: ExcelScript.Worksheet) {\n    // Get the worksheet where you want to apply protection\n\n\n    // Define the range that you want to allow edits in (Range object)\n\n    // Get the protection object for the worksheet\n    const protection = sheet.getProtection();\n\n    // If the sheet is not already protected, apply protection\n\n\n    let allowEditRanges = protection.getAllowEditRanges();\n    for (let allowEditRange of allowEditRanges) {\n        allowEditRange.delete(); // Remove the allow-edit rule\n\n\n\n        // Define the options for the allowed edit range (e.g., no password required)\n        const allowEditSettings: ExcelScript.AllowEditRangeOptions = {\n            password: \"imsorrydave\"// No password protection for the range\n        };\n\n        // Apply the \"Allow to Edit\" for the specified range\n        protection.addAllowEditRange(\"RN\", \"G9:G20\", allowEditSettings); // Use the Range object\n\n        protection.addAllowEditRange(\"PATIENT\", \"D9:D20\", allowEditSettings); // Use the Range object\n\n        protection.addAllowEditRange(\"TEAM\", \"C9:C20\", allowEditSettings); // Use the Range object\n\n\n\n\n\n        protection.addAllowEditRange(\"CHARGE\", \"L2:L2\", allowEditSettings);\n\n        //protection.addAllowEditRange'(\"SHIFT\", \"C5:C5\", allowEditSettings);\n\n        protection.addAllowEditRange(\"FIRST\", \"Q5:Q5\", allowEditSettings);\n\n        protection.addAllowEditRange(\"LAST\", \"Q6:Q6\", allowEditSettings);\n\n        protection.addAllowEditRange(\"NUM\", \"Q7:Q7\", allowEditSettings);\n    };\n\n};\n\nfunction allowEdit(sheet: ExcelScript.Worksheet) {\n\n\n\n    if (sheet.getProtection().getProtected()) {\n        sheet.getProtection().unprotect(\"imsorrydave\");\n    }\n\n    const editableRange1 = sheet.getRange(\"E7:E3\");\n    const editableRange2 = sheet.getRange(\"G7:G3\");\n    const editableRange3 = sheet.getRange(\"C9:C20\");\n    const editableRange4 = sheet.getRange(\"D9:D20\");\n    const editableRange5 = sheet.getRange(\"G9:G20\");\n    const editableRange6 = sheet.getRange(\"L2\");\n    const editableRange7 = sheet.getRange(\"Q5\");\n    const editableRange8 = sheet.getRange(\"Q6\");\n    const editableRange9 = sheet.getRange(\"Q7\");\n\n    editableRange1.getFormat().getProtection().setLocked(false);\n    editableRange2.getFormat().getProtection().setLocked(false);\n    editableRange3.getFormat().getProtection().setLocked(false);\n    editableRange4.getFormat().getProtection().setLocked(false);\n    editableRange5.getFormat().getProtection().setLocked(false);\n    editableRange6.getFormat().getProtection().setLocked(false);\n    editableRange7.getFormat().getProtection().setLocked(false);\n    editableRange8.getFormat().getProtection().setLocked(false);\n    editableRange9.getFormat().getProtection().setLocked(false);\n\n    sheet.getProtection().protect()\n\n\n\n    console.log(\"Protection reapplied with specified editable ranges.\");\n\n\n}\n\n/**\n * Clears all existing allowToEdit settings and then sets new allowToEdit ranges.\n *\n * @param workbook The workbook object in the Excel script.\n * @param editableRanges An array of string ranges that should be editable, e.g., [\"A1:C10\", \"D1:D10\"]\n */\nfunction clearAndSetAllowEdit(workbook: ExcelScript.Workbook, editableRanges: string[]) {\n    // Select the active sheet (you can change this to a specific sheet name if needed)\n    let sheet = workbook.getActiveWorksheet();\n\n    // Clear all existing allowEdit permissions by unprotecting the sheet\n    let protection = sheet.getProtection();\n    if (protection.getProtected()) {\n        protection.pauseProtection();\n    }\n\n    // Protect the sheet to apply new settings\n    protection.protect();\n\n    protection.setPassword(\"imsorrydave\");\n\n    // Loop through the specified ranges and set them as editable\n    editableRanges.forEach(rangeAddress => {\n        let range = sheet.getRange(rangeAddress);\n        range.getFormat().getProtection().setLocked(false);\n    });\n\n    // Log completion\n    console.log(\"Protection settings updated. Specified ranges are now editable.\");\n}\n\nfunction condFormatting(sheet: ExcelScript.Worksheet) {\n    let patientName = sheet.getRange('D9:D20');\n\n    try {\n        // Check if there are conditional formats and safely delete them\n        let conditionalFormats = patientName.getConditionalFormats();\n        if (conditionalFormats.length > 0) {\n            for (let i = conditionalFormats.length - 1; i >= 0; i--) {\n                conditionalFormats[i].delete(); // Safely delete existing formats\n            }\n            console.log(\"Conditional formatting rules cleared.\");\n        }\n    } catch (error) {\n        console.log(\"Error occurred while clearing conditional formatting: \" + error.message);\n    }\n\n    // Apply conditional formatting for text comparisons \"(S)\" and \"(P)\"\n    applyConditionalFormatting(patientName, '(S)', 'red', '00b0f0');\n    applyConditionalFormatting(patientName, '(P)', 'red', '00b0f0');\n\n    // Apply custom conditional formatting with the formula\n    let conditionalFormatRule = patientName.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);\n\n    // Adjust the formula to reference the correct relative cells within the range\n    conditionalFormatRule.getCustom().getRule().setFormula(\"=AND(N9>1, N20<5)\");\n\n    let format = conditionalFormatRule.getCustom().getFormat();\n    format.getFill().setColor(\"33ccff\"); // Set background color to blue\n    format.getFont().setBold(true); // Make font bold\n}\n\n// Helper function for conditional formatting\nfunction applyConditionalFormatting(range: ExcelScript.Range, text: string, color1: string, color2: string) {\n    const textComparison = range.addConditionalFormat(ExcelScript.ConditionalFormatType.containsText).getTextComparison();\n    textComparison.setRule({ text, operator: ExcelScript.ConditionalTextOperator.contains });\n    textComparison.getFormat().getFill().setColor(color1);\n    textComparison.getFormat().getFont().setBold(true);\n}\n","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[{\"name\":\"sheetName\",\"index\":0}],\"parameterSchema\":{\"type\":\"object\",\"required\":[\"sheetName\"],\"properties\":{\"sheetName\":{\"type\":\"string\"}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"},{\"name\":\"sheetName\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}